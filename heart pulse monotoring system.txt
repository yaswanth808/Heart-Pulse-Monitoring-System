To create a heart pulse monitoring system using IoT with C code, you'll need a few key components: a heart rate sensor (such as the MAX30100 or MAX30102), a microcontroller (like an Arduino or ESP32), and a way to transmit data (such as Wi-Fi or Bluetooth).

Here’s a simplified example using an Arduino and the MAX30102 sensor. This code reads heart rate data and sends it over serial. You can adapt it to work with IoT platforms like ThingSpeak, Blynk, or any other platform that supports data ingestion.

### Required Libraries

1. **MAX30102 Library**: For interfacing with the MAX30102 sensor.
2. **Wire Library**: For I2C communication.

First, make sure you have the MAX30102 library installed. You can get it from the Arduino Library Manager or directly from GitHub.

### Example Arduino Code

```c
#include <Wire.h>
#include <MAX30105.h> // Use the MAX30102 library

MAX30105 particleSensor;

// Variables to hold heart rate and SpO2 values
int heartRate;
int spo2;

void setup() {
  Serial.begin(9600);
  
  // Initialize the MAX30102 sensor
  if (!particleSensor.begin()) {
    Serial.println("MAX30102 sensor not detected. Please check wiring.");
    while (1);
  }
  
  particleSensor.setup(); // Configure sensor with default settings
}

void loop() {
  // Check if data is available
  if (particleSensor.available()) {
    // Read the heart rate and SpO2 values
    heartRate = particleSensor.getHeartRate();
    spo2 = particleSensor.getSpO2();

    // Print the values to the serial monitor
    Serial.print("Heart Rate: ");
    Serial.print(heartRate);
    Serial.print(" bpm\tSpO2: ");
    Serial.print(spo2);
    Serial.println(" %");

    // Clear the sensor's data buffer
    particleSensor.nextSample();
  }
  
  // Add a small delay to prevent flooding the serial output
  delay(1000);
}
```

### Explanation

1. **Include Libraries**: The `Wire` and `MAX30105` libraries are included to handle I2C communication and MAX30102-specific functions, respectively.

2. **Initialize Sensor**: In the `setup()` function, the `particleSensor.begin()` initializes the sensor. If the sensor is not detected, it will print an error message and halt.

3. **Read Sensor Data**: In the `loop()` function, `particleSensor.available()` checks if the sensor has new data. `particleSensor.getHeartRate()` and `particleSensor.getSpO2()` are used to read heart rate and SpO2 levels.

4. **Output Data**: The data is printed to the Serial Monitor every second.

### Adapting to IoT

To integrate with an IoT platform, you would typically replace the serial output with code to send data over a network. For instance, using Wi-Fi with an ESP8266 or ESP32, you could send HTTP requests to an IoT platform.

Here’s a brief example of how you might send the data to ThingSpeak using an ESP32:

```c
#include <WiFi.h>
#include <HTTPClient.h>

const char* ssid = "YOUR_SSID";
const char* password = "YOUR_PASSWORD";
const char* serverName = "https://api.thingspeak.com/update?api_key=YOUR_API_KEY";

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("Connected to WiFi");
}

void loop() {
  if (particleSensor.available()) {
    int heartRate = particleSensor.getHeartRate();
    int spo2 = particleSensor.getSpO2();
    
    if (WiFi.status() == WL_CONNECTED) {
      HTTPClient http;
      
      String url = String(serverName) + "&field1=" + String(heartRate) + "&field2=" + String(spo2);
      http.begin(url);
      int httpCode = http.GET();
      
      if (httpCode > 0) {
        String payload = http.getString();
        Serial.println(payload);
      }
      
      http.end();
    }

    particleSensor.nextSample();
  }
  
  delay(20000); // Send data every 20 seconds
}
```

### Summary

- **Sensor Initialization**: Initialize and configure the MAX30102 sensor.
- **Data Acquisition**: Read heart rate and SpO2 values from the sensor.
- **Data Transmission**: Use an IoT platform to send data from your microcontroller.

Make sure to adapt the code based on your specific IoT platform and sensor configuration.